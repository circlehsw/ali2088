# ===================================================================
# Streamlit 應用程式：從本地開發到雲端部署 標準作業程序 (SOP)
# 版本：1.0
# 日期：2025-10-19
# ===================================================================

本文件記錄了將一個使用本地 SQLite 資料庫的 Streamlit 應用程式，
完整遷移至雲端架構（Google Cloud SQL + Streamlit Community Cloud）
並進行效能優化的所有步驟。

---
### **階段一：資料庫遷移 (從 SQLite 到雲端 MySQL)**
---

**目標**：將本地的 `ATM_merge.db` 資料完整遷移到 Google Cloud SQL。

**1.1. 建立 Google Cloud SQL 執行個體**
   - 前往 Google Cloud Console -> SQL。
   - 建立新的 MySQL 執行個體。
   - 設定密碼（務必記錄下來）並選擇地區（如 `asia-east1`）。
   - 建立完成後，記錄「公開 IP 位址」。

**1.2. 設定防火牆**
   - 進入建立好的 SQL 執行個體 -> 「連線」頁籤。
   - 在「已授權的網路」中，新增 `0.0.0.0/0`，允許所有 IP 連線。
     （註：這是為了讓 Streamlit Cloud 的動態 IP 可以連線）。

**1.3. 建立資料庫與使用者**
   - 進入 SQL 執行個體 -> 「使用者」頁籤，為 `circle_admin` 或 `root` 設定密碼。
   - 進入 SQL 執行個體 -> 「資料庫」頁籤，建立一個新的資料庫（如 `ali2088`）。

**1.4. 使用 DBeaver 遷移資料**
   - 在 DBeaver 中，分別建立到本地 SQLite 檔案和遠端 Google Cloud MySQL 的連線。
   - 在本地 SQLite 的 `atm` 資料表上按右鍵 -> 「匯出資料」。
   - 選擇目標為「資料庫」，並選擇您建立的遠端 MySQL 連線。
   - 將目標容器設定為您建立的資料庫（如 `ali2088`）。
   - 依照精靈指示，開始執行資料傳輸。

---
### **階段二：程式碼修正 (全面雲端化)**
---

**目標**：修改所有 Python 檔案，使其不再依賴本地資料庫，而是連線到雲端。

**2.1. 安裝必要的 Python 函式庫**
   - 在專案的終端機中執行：
   ```bash
   pip install mysql-connector-python SQLAlchemy

2.2. 建立密碼檔 (secrets.toml)

在專案根目錄下，建立資料夾 .streamlit。

在 .streamlit 資料夾內，建立檔案 secrets.toml。

貼上以下內容，並填入您的真實密碼。

Ini, TOML

# 程式碼：.streamlit/secrets.toml
[connections.mysql]
dialect = "mysql"
driver = "mysqlconnector"
host = "34.81.145.212"  # 請換成您的資料庫公開 IP
port = 3306
username = "circle_admin" # 請換成您的資料庫使用者
password = "您的真實密碼"
database = "ali2088"      # 請換成您的資料庫名稱
2.3. 修正所有需要連線資料庫的 .py 檔案

原則：移除所有 import sqlite3 和 db_path 相關的程式碼，改用 st.connection("mysql", type="sql")。並將 SQL 語法從 SQLite 格式改為 MySQL 格式。

檔案 0_Module/daily_seamless_trend.py 完整替換為：

Python

# 程式碼：daily_seamless_trend.py
# (此處省略完整程式碼，請參考對話紀錄中的最終版本)
# 關鍵改動是 _fetch_intraday_data 和 _get_all_unique_dates 函數。
檔案 0_Module/five_standard.py 完整替換為：

Python

# 程式碼：five_standard.py
# (此處省略完整程式碼，請參考對話紀錄中的最終版本)
# 關鍵改動是 _get_date_bounds 和 _get_years 函數。
檔案 0_Module/output_multi_filter.py 完整替換為 (包含效能優化與格式修正的最終版)：

Python

# 程式碼：output_multi_filter.py
# (此處省略完整程式碼，請參考對話紀錄中的最終版本)
# 這是改動最大的檔案，包含 SQL 語法翻譯、效能優化、日期格式修正。
檔案 1_Multi_Filter_Display.py 和 5_Trend_Similarity_Analyzer.py

檢查所有函數呼叫，移除傳遞 db_path 的參數。

階段三：雲端部署 (使用 Git 和 Streamlit Cloud)
目標：將修改好的程式碼上傳到 GitHub，並部署到 Streamlit Cloud。

3.1. 更新 requirements.txt

在專案終端機執行，確保所有函式庫都被記錄：

Bash

pip freeze > requirements.txt
3.2. 安裝與設定 Git

從 https://git-scm.com/downloads 下載並安裝 Git。

安裝後，在終端機設定您的身分：

Bash

git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"
3.3. 建立 .gitignore 檔案

在專案根目錄建立 .gitignore 檔案，告訴 Git 忽略本地資料庫檔案。

# 程式碼：.gitignore
3_DB/
3.4. 上傳專案到 GitHub

在 GitHub 網站上建立一個新的、公開的、空的 Repository。

在專案終端機中，依序執行以下指令：

Bash

# 切換到專案目錄
cd path/to/your/project 

# 初始化倉庫
git init

# 將所有檔案加入（.gitignore 會自動排除 3_DB/）
git add .

# 第一次提交
git commit -m "專案初始化"

# 將本地倉庫與遠端 GitHub 倉庫連結
git remote add origin [https://github.com/您的帳號/您的倉庫名.git](https://github.com/您的帳號/您的倉庫名.git)

# 將本地預設分支改名為 main
git branch -M main

# 推送上傳
git push -u origin main
3.5. 部署到 Streamlit Cloud

前往 https://share.streamlit.io/ 並用 GitHub 登入。

點擊 "New app"。

Repository: 選擇您上傳的倉庫。

Branch: main。

Main file path: 4_ATM_merge_interactive.py。

點擊 "Advanced settings..."，將 secrets.toml 的內容完整貼上。

點擊 "Deploy!"。

階段四：效能與錯誤修正
目標：解決網站運行緩慢、連線超時等問題。

4.1. 修正連線超時 (防火牆問題)

問題：網站報錯 ConnectionTimeoutError。

解決：回到 Google Cloud SQL 的「連線」設定，在「已授權的網路」中新增 0.0.0.0/0。

4.2. 提升查詢速度 (建立索引)

問題：執行查詢非常久。

解決：在 DBeaver 中對 atm 資料表執行以下 SQL 指令建立索引。

SQL

-- 程式碼：建立索引 SQL
CREATE INDEX idx_mode_timestamp ON atm (mode(20), `時間戳記`(20));
CREATE INDEX idx_timestamp ON atm (`時間戳記`(20));
-- 如果複合索引失敗，改用兩個獨立索引：
CREATE INDEX idx_mode ON atm (mode(20));
4.3. 修正多頁面導覽問題

問題：網站左上角出現多餘的導覽選單。

解決：從 GitHub 倉庫中，刪除與主要應用無關的 .py 檔案（如 app.py, db.py）。

4.4. 日常更新流程

在本地電腦修改程式碼並測試。

確認無誤後，在專案終端機執行：

Bash

# 1. 將雲端最新版同步下來（好習慣）
git pull --rebase

# 2. 加入所有修改
git add .

# 3. 為修改寫下註解
git commit -m "您的修改說明"

# 4. 推送更新
git push
Streamlit Cloud 會自動偵測到更新並重新部署您的網站。

========================= SOP 結束 =========================
